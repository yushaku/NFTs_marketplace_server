// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  admin
}

enum OrderStatus {
  pending
  paid
  delivering
  shipped
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
}

model User {
  wallet_address String   @id
  name           String
  role           Role     @default(customer)
  created_at     DateTime @default(now())

  // Relationships
  orders    Order[]
  addresses Address[]
}

model Product {
  product_id     Int      @id @default(autoincrement())
  name           String
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  stock_quantity Int      @default(0)
  banner         String
  image_urls     String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  order_items OrderItem[]
}

model Order {
  order_id            String      @id @default(uuid())
  user_wallet         String
  order_date          DateTime    @default(now())
  status              OrderStatus @default(pending)
  total_amount        Decimal     @db.Decimal(10, 2)
  price_in_token      Decimal     @db.Decimal(7, 5)
  shipping_address_id Int
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  encoded             String?

  // Relationships
  user             User        @relation(fields: [user_wallet], references: [wallet_address])
  shipping_address Address     @relation("ShippingAddress", fields: [shipping_address_id], references: [address_id])
  order_items      OrderItem[]
}

model OrderItem {
  order_item_id  Int      @id @default(autoincrement())
  order_id       String
  product_id     Int
  quantity       Int
  unit_price     Decimal  @db.Decimal(10, 2)
  total_price    Decimal  @db.Decimal(10, 2)
  price_in_token Decimal  @db.Decimal(7, 5)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relationships
  order   Order   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [product_id])

  @@index([order_id])
  @@index([product_id])
}

model Address {
  address_id     Int      @id @default(autoincrement())
  user_wallet    String
  recipient_name String
  phone_number   String?
  street         String
  city           String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relationships
  user            User    @relation(fields: [user_wallet], references: [wallet_address])
  shipping_orders Order[] @relation("ShippingAddress")
}

model Config {
  key   String @id
  value String
}

model Logs {
  txhash      String   @id
  userAddress String
  action      String
  created_at  DateTime @default(now())
}

model FailLogs {
  txhash      String   @id
  userAddress String
  action      String
  created_at  DateTime @default(now())
}
